<?php

namespace ddaBundle\ArtisteBundle\Repository;

/**
 * ArtisteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArtisteRepository extends \Doctrine\ORM\EntityRepository
{

    /*
     * return count ddaBundleArtisteBundle:Artiste
     */
    public function getActiveCount()
    {
        return $this->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /*
     * return number ddaBundleArtisteBundle:Artiste active
     */
    public function getNoActiveCount()
    {
        $qb = $this->_em->createQueryBuilder();

        return $qb
            ->select('COUNT(a)')
            ->from('ddaBundleArtisteBundle:Artiste', 'a')
            ->where($qb->expr()->notIn('a.active', 1))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getArtisteWithCatgeory()
    {

        $rq = "SELECT
    LOWER(A.slug) AS slug,
    A.nom,
    A.prenom,
    A.isActive AS active,
    IF(
		-- si une categorie avec home est a true
		(SELECT
                D.id
            FROM
                dda__artiste_dossier AS D
            WHERE
                D.artiste_id = A.id AND D.home IS TRUE
            LIMIT 1) IS NULL,
		-- affiche une categorie de l'artiste alÃ©atoire
         (SELECT
                D.image
            FROM
                dda__artiste_dossier AS D
            WHERE
                D.artiste_id = A.id AND D.image IS NOT NULL AND D.image NOT LIKE \"/uploads/categorie/\"
            ORDER BY RAND()
            LIMIT 1),
        -- affiche la categorie avec home a true
        (SELECT
                D.image
            FROM
                dda__artiste_dossier AS D
            WHERE
                D.artiste_id = A.id AND D.home IS TRUE
            LIMIT 1)
        ) AS category
FROM
    dda__artiste AS A
ORDER BY A.nom ASC";

        $connection = $this->_em->getConnection();
        $statement = $connection->prepare($rq);
        $statement->execute();
        $results = $statement->fetchAll();
        return $results;
    }

}
